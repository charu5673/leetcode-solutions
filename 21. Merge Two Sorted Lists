/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null)
        return list2;
        if(list2==null)
        return list1;
        ListNode head;
        ListNode current;
        boolean flag=true,flag1=true,flag2=true;
        if(list1.val<list2.val)
        {
            head=list1;
            if(list1.next!=null)
            list1=list1.next;
            else
            {
                flag=false;
                flag1=false;
            }
        }
        else
        {
            head=list2;
            if(list2.next!=null)
            list2=list2.next;
            else
            {
                flag=false;
                flag2=false;
            }
        }
        current=head;
        while(flag)
        {
            if(list1.val<list2.val)
            {
                current.next=list1;
                current=current.next;
                if(list1.next!=null)
                list1=list1.next;
                else
                {
                    flag1=false;
                    break;
                }
            }
            else
            {
                current.next=list2;
                current=current.next;
                if(list2.next!=null)
                list2=list2.next;
                else
                {
                    flag2=false;
                    break;
                }
            }
        }
        while(flag1)
        {
            current.next=list1;
            current=current.next;
            if(list1.next!=null)
            list1=list1.next;
            else
            break;
        }
        while(flag2)
        {
            current.next=list2;
            current=current.next;
            if(list2.next!=null)
            list2=list2.next;
            else
            break;
        }
        return head;
    }
}
