/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void makeLeftTree(int[] nums, TreeNode root, int i, int j) {
        if(j < i) return;
        int m = (j + i) / 2;
        TreeNode left = new TreeNode(nums[m]);
        makeLeftTree(nums, left, i, m - 1);
        makeRightTree(nums, left, m + 1, j);
        root.left = left;
    }
    public void makeRightTree(int[] nums, TreeNode root, int i, int j) {
        if(j < i) return;
        int m = (j + i) / 2;
        TreeNode right = new TreeNode(nums[m]);
        makeLeftTree(nums, right, i, m - 1);
        makeRightTree(nums, right, m + 1, j);
        root.right = right;
    }
    public TreeNode sortedArrayToBST(int[] nums) {
        TreeNode root = new TreeNode();
        int m = nums.length / 2;
        root.val = nums[m];
        makeLeftTree(nums, root, 0, m - 1);
        makeRightTree(nums, root, m + 1, nums.length - 1);
        return root;
    }
}
